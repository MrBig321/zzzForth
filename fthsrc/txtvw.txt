( We dont use a rowbeg-array here as in txtvwArr.txt)
: TXTVIEW ;  ( marker for FORGET)

DECIMAL

: KEY? KEYW DISCARD DROP ; 

28 CONSTANT KEYPGUP
29 CONSTANT KEYPGDN
22 CONSTANT KEYUP
23 CONSTANT KEYDOWN
27 CONSTANT KEYESC
30 CONSTANT KEYHOME
31 CONSTANT KEYEND

31 CONSTANT NROWS 
64 CONSTANT NCOLS 

VARIABLE MCURX 	( Saved cursor-position of the main-screen) ( 2VARIABLE !?)
VARIABLE MCURY

: SAVEMCUR  ( -- )
   GET-XY MCURY ! MCURX ! ;

: RESTOREMCUR  ( -- )
   MCURX @ MCURY @ AT-XY ;

: INITCURSOR  ( -- )
   0 0 AT-XY ;

: DOMSCR>  ( -- )
   0 0 NCOLS NROWS MSCR> ;

: DO>MSCR  ( -- )
   >MSCR OSPARSON SCROLLON RESTOREMCUR ;

: SHOWCTRLTEXT  ( -- )
    3 NROWS AT-XY ." PGUP PGDN HOME END " 
   22 NROWS AT-XY 127 EMIT  
   24 NROWS AT-XY 128 EMIT  
   43 NROWS AT-XY ." Press ESC to quit" ;

: INITSCR  ( -- )
   OSPARSOFF SCROLLOFF 
   32 REMCUR SAVEMCUR PAGE  
   SHOWCTRLTEXT 
   DOMSCR> INITCURSOR ;

: PRINTABLE? ( c -- flag )
    DUP 32 >= SWAP 127 < AND ;

VARIABLE BADDR  ( Beginning address, i.e. address of the first byte of the file)
VARIABLE LENGTH ( length of file)
VARIABLE RCNT   ( row-count)
VARIABLE ROFFS  ( byte-offset form BADDR of the first byte of the first row of the screen)
VARIABLE RIDX   ( index of first row of the first row of the screen, e.g. RIDX=23 is the 23th row from BADDR)
( ZZZFOS prints one space in case of a TAB. See _accept and gstdio_draw_char in assembly)
( If we want to print several spaces in case of a TAB,) 
( increase TABSIZE and update the code, i.e. the logic)
( So the current code only works with TABSIZE=1)
1 CONSTANT TABSIZE 
VARIABLE STORE? 

( calculate rows-count)
: CRCNT  ( addr len -- #rows )
   0 0 ROT  ( addr #rows #chars length ) 
   FALSE STORE? !
   0 DO 
     ( addr #rows #chars )
      STORE? @ IF FALSE STORE? ! DROP 1+ 0 THEN 
      >R OVER C@ 10 = R> SWAP IF TRUE STORE? ! THEN 
      >R OVER C@  9 = R> SWAP IF TABSIZE + DUP NCOLS >= IF TRUE STORE? ! THEN THEN 
      >R OVER C@ PRINTABLE? R> SWAP IF 1+ DUP NCOLS = IF TRUE STORE? ! THEN THEN 
      2>R 1+ 2R>  ( addr+ #rows #chars )
   LOOP ROT 2DROP 1+ ;  

: SHOWSCR  ( roffs -- ) 
   DUP BADDR @ + SWAP LENGTH @ SWAP - ( addr #bytesleft ) ( #bytesleft is the count of chars left to be displayed from addr)
   0 0 ROT    ( addr #rows[0] #charsperrow[0] #bytesleft )
   0 DO 
     ( addr addr #rows #chars )  
      >R OVER C@ 10 = R> SWAP IF DROP 10 EMIT 1+ 0 THEN  
      >R OVER C@  9 = R> SWAP IF DUP TABSIZE + NCOLS 1- >= IF NCOLS SWAP - SPACES 1+ 0 ELSE TABSIZE + TABSIZE SPACES THEN THEN 
      >R OVER C@ PRINTABLE? R> SWAP IF DUP NCOLS 1- = IF DROP 1+ 0 ELSE 1+ THEN 2>R DUP C@ EMIT 2R> THEN 
      2>R 1+ 2R> ( addr addr+ #rows #chars )  
      OVER NROWS = IF LEAVE THEN  
   LOOP 2DROP DROP ;  

( lastrow!? If nroffs>length: notvalid)  ( offs TRUE ) ( FALSE )  ( !?)
( finds row-offset of next row)
: NROFFS  ( roffs -- nroffs )
   NCOLS + DUP BADDR @ + DUP NCOLS - DO I C@ 10 = IF DROP I BADDR @ - 1+ LEAVE THEN LOOP ; 

( Find previous 0 or new-line)
: FPZNL ( roffs -- offs flagNL )
   BADDR @ + 
   BEGIN
     1- DUP C@ 10 = OVER BADDR @ = OR 
   UNTIL DUP C@ 10 = SWAP BADDR @ - SWAP ;

( Check NL in previous row)
: CHKPNL  ( roffs -- NLoffs TRUE | FALSE )
   BADDR @ + NCOLS 0 DO 1- DUP C@ 10 = IF BADDR @ - TRUE UNLOOP EXIT THEN LOOP DROP FALSE ; 

( finds row-offset of previous row)
( NOTE that roffs cant be zero)
: PROFFS  ( roffs -- proffs )
   DUP CHKPNL INVERT IF NCOLS - EXIT THEN 
   ( roffs NLoffs )
   FPZNL  ( roffs offs flagNL )
   IF 1+ THEN 
   DUP >R
   BEGIN
    R> DROP DUP >R
    NROFFS 2DUP = 
   UNTIL 2DROP R> ; 

: ROWSUP  ( n -- )
   DUP NEGATE RIDX +! ROFFS @ SWAP 0 DO PROFFS LOOP ROFFS ! ; 

: ROWSDN  ( n -- )
   DUP RIDX +! ROFFS @ SWAP 0 DO NROFFS LOOP ROFFS ! ; 

: ROWSDN2  ( n -- )
  0 SWAP 0 DO NROFFS LOOP ROFFS ! ;

: KPGUP  ( -- )
   RIDX @ 0= IF EXIT THEN 
   RIDX @ NROWS > 
   IF NROWS ROWSUP ELSE 0 RIDX ! 0 ROFFS ! 
   THEN PAGEN ROFFS @ SHOWSCR INVSCR ;

: KPGDN  ( -- )
   RCNT @ RIDX @ - NROWS > IF NROWS ROWSDN PAGEN ROFFS @ SHOWSCR INVSCR THEN ;

: KUP  ( -- )
   RIDX @ 0> IF 1 ROWSUP PAGEN ROFFS @ SHOWSCR INVSCR THEN ;

: KDOWN  ( -- )
   RCNT @ RIDX @ - NROWS > IF 1 ROWSDN PAGEN ROFFS @ SHOWSCR INVSCR THEN ; 

: KHOME  ( -- )
   RIDX @ 0 <> IF 0 RIDX ! 0 ROFFS ! PAGEN ROFFS @ SHOWSCR INVSCR THEN ;

( we should go NROWS rows up from the end of the file and not RIDX from the beginning !?)
: KEND  ( -- )
   RCNT @ NROWS > IF RCNT @ NROWS - DUP RIDX ! ROWSDN2 PAGEN ROFFS @ SHOWSCR INVSCR THEN ;

: CTRLKEYS  ( key -- )
    CASE 
      KEYPGUP OF KPGUP ENDOF 
      KEYPGDN OF KPGDN ENDOF 
      KEYUP   OF KUP   ENDOF 
      KEYDOWN OF KDOWN ENDOF 
      KEYHOME OF KHOME ENDOF 
      KEYEND  OF KEND  ENDOF 
    ENDCASE ;

: KEYS  ( -- )
   BEGIN 
     KEYW DISCARD 
     DUP CTRLKEYS
     KEYESC = 
   UNTIL ;

: TXTVW  ( addr len -- )
   2DUP LENGTH ! BADDR ! 0 RIDX ! 0 ROFFS ! 
   INITSCR DUP 0> IF CRCNT RCNT ! 0 SHOWSCR KEYS ELSE 2DROP KEY? THEN DO>MSCR ; 


