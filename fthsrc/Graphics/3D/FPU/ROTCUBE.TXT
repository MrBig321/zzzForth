DECIMAL

( creates a vector)
 : VEC3 ( -- )   ( RT:) ( idx -- addr ) ( PStack)
   CREATE HERE 3 FLOATS 0 FILL 3 FLOATS ALLOT
   DOES> SWAP 1- FLOATS + ;		( DOES> puts BODY-address on pstack)

( clears vector)
: VEC30 ( addr -- ) ( PStack)
   3 0 DO DUP 0.0 F! FLOAT+ LOOP DROP ;

( prints a vector)
: VEC3?  ( addr -- ) ( PStack)
   3 0 DO DUP F? FLOAT+ LOOP DROP ;

( creates a 4*4 matrix)
: MAT ( -- )  ( RT:) ( #row #col -- addr ) ( PStack)
	CREATE HERE DUP 16 FLOATS 0 FILL 
	4 0 DO DUP 1.0 F! 5 FLOATS + LOOP DROP 
	16 FLOATS ALLOT
	DOES> ROT 1- 4 * FLOATS + SWAP 1- FLOATS + ; 

( prints a matrix) 
: MAT?  ( addr -- ) ( PStack)
	CR 4 0 DO 4 0 DO DUP F? FLOAT+ LOOP CR LOOP DROP ;

( inits a USER-vector, i.e. a vector defined per task)
: INITUVEC ( -- )
   INCFUSER INCFUSER ;

( Set/Get an element of a User-vector)
: SGUVEC ( #idx addr -- addr2)
   SWAP 1- FLOATS + ;

( clears a matrix) 
: MAT0  ( addr -- ) ( PStack)
   4 0 DO 4 0 DO DUP 0.0 F! FLOAT+ LOOP LOOP DROP ;

( inits a matrix to identity matrix) 
: UMATI  ( addr -- ) ( PStack)
   4 0 DO DUP 1.0 F! 5 FLOATS + LOOP DROP ;

( copies matrix at addr1 to matrix at addr2)
: MATCP   ( addr1 addr2 -- )
   SWAP 16 0 DO DUP F@ FLOAT+ SWAP DUP F! FLOAT+ SWAP LOOP DROP DROP ;

( inits a USER-matrix, i.e. a matrix defined per task)
: ALLOCUMAT ( -- )
   15 0 DO INCFUSER LOOP ;

( Set/Get an element of a User-matrix)
: SGUMAT ( #row #col addr -- addrElement)
   ROT 1- 4 * FLOATS + SWAP 1- FLOATS + ; 

VARIABLE VECRESADDR	( the address of the Vector holding the result)
VARIABLE MATRESADDR	( the address of the Matrix holding the result)
FVARIABLE VW	( the W)

( Matrix*Vector)   ( result in VECRESADDR, it must be cleared!)
: MV* ( addrm addrv -- ) 
   0.0 VW F!
   3 0 DO 3 0 DO OVER J 4 * FLOATS + I FLOATS + F@ DUP I FLOATS + F@ F* 
   VECRESADDR @ J FLOATS + F+! LOOP 
   OVER I 4 * FLOATS + 3 FLOATS + F@ VECRESADDR @ I FLOATS + F+! LOOP
   SWAP 3 4 * FLOATS + 3 0 DO I 0 <> IF FLOAT+ THEN DUP F@ SWAP I 0 <> IF FLOAT+ THEN DUP F@ F* VW F+! LOOP DROP FLOAT+ F@ VW F+!
   VW F@ F0= INVERT IF VECRESADDR @ 3 0 DO I 0 <> IF FLOAT+ THEN DUP F@ VW F@ F/ DUP F! LOOP DROP THEN ;

( Matrix*Matrix)   ( result in MATRESADDR, it must be cleared!)
VARIABLE MOLIDX	( the outermost loop-idx value)
: MM* ( addrm1 addrm2 -- )  ( PStack)
   4 0 DO I MOLIDX ! 4 0 DO 4 0 DO OVER MOLIDX @ 4 * FLOATS + I FLOATS + F@ 
   DUP I 4 * FLOATS + J FLOATS + F@ F*
   MATRESADDR @ MOLIDX @ 4 * FLOATS + J FLOATS + F+!
   LOOP LOOP LOOP DROP DROP ;


( 8 vertices of CUBE)
VEC3 V1
-0.25 1 V1 F! 0.25 2 V1 F! -0.25 3 V1 F! 
VEC3 V2
0.25 1 V2 F! 0.25 2 V2 F! -0.25 3 V2 F! 
VEC3 V3
0.25 1 V3 F! -0.25 2 V3 F! -0.25 3 V3 F! 
VEC3 V4
-0.25 1 V4 F! -0.25 2 V4 F! -0.25 3 V4 F! 
VEC3 V5
-0.25 1 V5 F! 0.25 2 V5 F! 0.25 3 V5 F! 
VEC3 V6
0.25 1 V6 F! 0.25 2 V6 F! 0.25 3 V6 F! 
VEC3 V7
0.25 1 V7 F! -0.25 2 V7 F! 0.25 3 V7 F! 
VEC3 V8
-0.25 1 V8 F! -0.25 2 V8 F! 0.25 3 V8 F! 
CREATE VERTICES 1 V1 , 1 V2 , 1 V3 , 1 V4 , 1 V5 , 1 V6 , 1 V7 , 1 V8 ,
8 CONSTANT VERTEXNUM
4 CONSTANT FACECOORDSCNT
CREATE FACE1 0 , 1 , 2 , 3 ,				( face1 of the cube consists of vertices 1, 2, 3, 4)
CREATE FACE2 1 , 5 , 6 , 2 , 
CREATE FACE3 5 , 4 , 7 , 6 , 
CREATE FACE4 4 , 0 , 3 , 7 , 
CREATE FACE5 0 , 4 , 5 , 1 , 
CREATE FACE6 3 , 2 , 6 , 7 , 
CREATE FACES FACE1 , FACE2 , FACE3 , FACE4 , FACE5 , FACE6 , 
6 CONSTANT FACENUM

: INITCOORDS ( -- )
   2 VERTEXNUM * 1- 0 DO INCUSER LOOP ;

USER COORDS INITCOORDS						( the transformed [x,y] coords, ints)
VARIABLE POLYCOORDS 2 FACECOORDSCNT * 1- CELLS ALLOT

SCRW @ I2F FCONSTANT FSCRW
SCRH @ I2F FCONSTANT FSCRH

63488 CONSTANT REDCLR
2016 CONSTANT GREENCLR
USER CLR	 	( color of CUBE)
VARIABLE BKGCLR 
FUSER SPEED		( speed of rotation)

( Scaling)
FUSER SCALEX FUSER SCALEY FUSER SCALEZ
FUSER MSCALE ALLOCUMAT 

( Shearing)
FUSER SHEARXYA FUSER SHEARXYB FUSER SHEARXZA FUSER SHEARXZC FUSER SHEARYZB FUSER SHEARYZC
FUSER MSHEARXY ALLOCUMAT 
FUSER MSHEARXZ ALLOCUMAT 
FUSER MSHEARYZ ALLOCUMAT 
FUSER MSHEAR ALLOCUMAT 

( Rotation)
FUSER VROTDEGS INITUVEC 
FUSER MROTX ALLOCUMAT
FUSER MROTY ALLOCUMAT
FUSER MROTZ ALLOCUMAT
FUSER MROT ALLOCUMAT

( Translation)
FUSER VTRANS INITUVEC
FUSER MTRANS ALLOCUMAT

: UPDSCALE  ( -- )
   SCALEX F@ 1 1 MSCALE SGUMAT F!
   SCALEY F@ 2 2 MSCALE SGUMAT F!
   SCALEZ F@ 3 3 MSCALE SGUMAT F! ;

: UPDSHEARXY  ( -- )
   SHEARXYA F@ 1 3 MSHEARXY SGUMAT F!
   SHEARXYB F@ 2 3 MSHEARXY SGUMAT F! ;

: UPDSHEARXZ  ( -- )
   SHEARXZA F@ 1 2 MSHEARXZ SGUMAT F!
   SHEARXZC F@ 3 2 MSHEARXZ SGUMAT F! ;

: UPDSHEARYZ  ( -- )
   SHEARYZB F@ 2 1 MSHEARYZ SGUMAT F!
   SHEARYZC F@ 3 1 MSHEARYZ SGUMAT F! ;

: UPDSHEAR  ( -- )
   UPDSHEARXY UPDSHEARXZ UPDSHEARYZ
   MATRESADDR @ MAT0						( clear result matrix)
   1 1 MSHEARXY SGUMAT 1 1 MSHEARXZ SGUMAT MM*
   MATRESADDR @ 1 1 MSHEAR SGUMAT MATCP		( copy result)
   MATRESADDR @ MAT0						( clear result matrix)
   1 1 MSHEAR SGUMAT 1 1 MSHEARYZ SGUMAT MM*
   MATRESADDR @ 1 1 MSHEAR SGUMAT MATCP ;	( copy result)

: UPDROTX  ( -- )
   1 VROTDEGS SGUVEC F@ FRADIANS FCOS 2 2 MROTX SGUMAT F!
   1 VROTDEGS SGUVEC F@ FRADIANS FSIN FNEGATE 2 3 MROTX SGUMAT F!
   1 VROTDEGS SGUVEC F@ FRADIANS FSIN 3 2 MROTX SGUMAT F!
   1 VROTDEGS SGUVEC F@ FRADIANS FCOS 3 3 MROTX SGUMAT F! ;

: UPDROTY  ( -- )
   2 VROTDEGS SGUVEC F@ FRADIANS FCOS 1 1 MROTY SGUMAT F!
   2 VROTDEGS SGUVEC F@ FRADIANS FSIN 1 3 MROTY SGUMAT F!
   2 VROTDEGS SGUVEC F@ FRADIANS FSIN FNEGATE 3 1 MROTY SGUMAT F!
   2 VROTDEGS SGUVEC F@ FRADIANS FCOS 3 3 MROTY SGUMAT F! ;

: UPDROTZ  ( -- )
   3 VROTDEGS SGUVEC F@ FRADIANS FCOS 1 1 MROTZ SGUMAT F!
   3 VROTDEGS SGUVEC F@ FRADIANS FSIN FNEGATE 1 2 MROTZ SGUMAT F!
   3 VROTDEGS SGUVEC F@ FRADIANS FSIN 2 1 MROTZ SGUMAT F!
   3 VROTDEGS SGUVEC F@ FRADIANS FCOS 2 2 MROTZ SGUMAT F! ;

: UPDROT  ( -- )
   UPDROTX UPDROTY UPDROTZ
   MATRESADDR @ MAT0						( clear result matrix)
   1 1 MROTX SGUMAT 1 1 MROTY SGUMAT MM*
   MATRESADDR @ 1 1 MROT SGUMAT MATCP		( copy result)
   MATRESADDR @ MAT0						( clear result matrix)
   1 1 MROT SGUMAT 1 1 MROTZ SGUMAT MM*
   MATRESADDR @ 1 1 MROT SGUMAT MATCP ;		( copy result)

: UPDTRANS  ( -- )
   1 VTRANS SGUVEC F@ 1 4 MTRANS SGUMAT F!
   2 VTRANS SGUVEC F@ 2 4 MTRANS SGUMAT F!
   3 VTRANS SGUVEC F@ 3 4 MTRANS SGUMAT F! ;

( Projection; common in all objects)
FVARIABLE S
90.0 FCONSTANT FOV
100.0 FCONSTANT ZFAR
0.1 FCONSTANT ZNEAR
1.0 FOV 2.0 F/ FRADIANS FTAN F/ S F!
MAT MPROJ
S F@ 1 1 MPROJ F!
( S F@ FSCRW FSCRH F/ F/ 1 1 MPROJ F!)
S F@ 2 2 MPROJ F!
ZFAR FNEGATE ZFAR ZNEAR F- F/ 3 3 MPROJ F!
( ZFAR ZNEAR F+ ZNEAR ZFAR F- F/ 3 3 MPROJ F!)
ZFAR ZNEAR F* FNEGATE ZFAR ZNEAR F- F/ 3 4 MPROJ F!
( 2.0 ZFAR ZNEAR F* F* ZNEAR ZFAR F- F/ 3 4 MPROJ F!)
-1.0 4 3 MPROJ F!

( common)
: TOSCRCOORDS  ( addrv -- )  ( addr of result vector in VECRESADDR)
   DUP F@ 1.0 F+ 0.5 F* FSCRW F* FSCRW 1.0 F- FMIN VECRESADDR @ F!
   1.0 FLOAT+ F@ 1.0 F+ 0.5 F* F- FSCRH F* FSCRH 1.0 F- FMIN VECRESADDR @ FLOAT+ F!
   1.0 VECRESADDR @ FLOAT+ FLOAT+ F! ;

( common)
: INIT ( -- )
   PAGE 2 30 AT-XY S" Press Ctrl-c or SPACE to Quit (RedCube:'a', GreenCube:'b')" TYPE ; 

VEC3 VECTMP					( vector for tmp result)
VEC3 PVEC					( vector for tmp result)
FUSER MMAT ALLOCUMAT		( scaling*shearing*rotation*translation)
MAT MMATTMP					( tmp result)

: UPDMAT  ( -- )
   UPDSCALE UPDSHEAR UPDROT UPDTRANS
   MATRESADDR @ MAT0						( clear result-matrix)
   1 1 MSCALE SGUMAT 1 1 MSHEAR SGUMAT MM*
   MATRESADDR @ 1 1 MMAT SGUMAT MATCP		( copy result)
   MATRESADDR @ MAT0
   1 1 MROT SGUMAT 1 1 MMAT SGUMAT MM*
   MATRESADDR @ 1 1 MMAT SGUMAT MATCP
   MATRESADDR @ MAT0
   1 1 MTRANS SGUMAT 1 1 MMAT SGUMAT MM*
   MATRESADDR @ 1 1 MMAT SGUMAT MATCP ;


: TRANSFORM  ( -- )
   VERTEXNUM 0 DO 
   1 VECTMP VEC30
   1 VECTMP VECRESADDR !
   1 1 MMAT SGUMAT VERTICES I CELLS + @ MV* 
   1 PVEC VEC30
   1 PVEC VECRESADDR !
   1 1 MPROJ 1 VECTMP MV* 
   1 PVEC TOSCRCOORDS         ( result in VECRESADDR; same as input!)
   1 PVEC F@ F2INT COORDS I 2 * CELLS + DUP >R ! 2 PVEC F@ F2INT R> CELL+ !
   LOOP ;

: DRAW ( -- )
   FACENUM 0 DO FACES I CELLS + @ 
   FACECOORDSCNT 0 DO DUP I CELLS + 
   COORDS SWAP @ 2 * CELLS + DUP @ POLYCOORDS I 2 * CELLS + DUP ROT SWAP ! CELL+ SWAP CELL+ @ SWAP ! LOOP DROP 
   POLYCOORDS FACECOORDSCNT 0 DO DUP @ SWAP CELL+ DUP @ SWAP CELL+ LOOP DROP 
   CLR @ FACECOORDSCNT POLY LOOP ;  


: ROTATEX ( -- )
   SPEED F@ 1 VROTDEGS SGUVEC F+!  360.0 1 VROTDEGS SGUVEC F@ F< IF 1 VROTDEGS SGUVEC F@ 360.0 F- 1 VROTDEGS SGUVEC F! THEN 
   1 VROTDEGS SGUVEC F@ F0< IF 360.0 1 VROTDEGS SGUVEC F+! THEN ;

: ROTATEY ( -- )
   SPEED F@ 2 VROTDEGS SGUVEC F+!  360.0 2 VROTDEGS SGUVEC F@ F< IF 2 VROTDEGS SGUVEC F@ 360.0 F- 2 VROTDEGS SGUVEC F! THEN 
   2 VROTDEGS SGUVEC F@ F0< IF 360.0 2 VROTDEGS SGUVEC F+! THEN ;

: ROTATEZ ( -- )
   SPEED F@ 3 VROTDEGS SGUVEC F+!  360.0 3 VROTDEGS SGUVEC F@ F< IF 3 VROTDEGS SGUVEC F@ 360.0 F- 3 VROTDEGS SGUVEC F! THEN 
   3 VROTDEGS SGUVEC F@ F0< IF 360.0 3 VROTDEGS SGUVEC F+! THEN ;


: DELAY  ( -- )
   20 SLEEP ;      ( calls PAUSE) 

: INITUMATS ( -- )
   MSCALE UMATI
   MSHEARXY UMATI MSHEARXZ UMATI MSHEARYZ UMATI MSHEAR UMATI
   MROTX UMATI MROTY UMATI MROTZ UMATI MROT UMATI 
   MTRANS UMATI	;

: INITRCUBE1 ( -- )
   INITUMATS
   1.0 SCALEX F! 1.0 SCALEY F! 1.0 SCALEZ F!										( don't scale)
   0.0 SHEARXYA F! 0.0 SHEARXYB F! 0.0 SHEARXZA F! 0.0 SHEARXZC F! 0.0 SHEARYZB F! 0.0 SHEARYZC F!	( no shear)
   0.0 1 VROTDEGS SGUVEC F! 30.0 2 VROTDEGS SGUVEC F! 0.0 3 VROTDEGS SGUVEC F! 		( rotate around y-axis)
   -0.7 1 VTRANS SGUVEC F! 0.0 2 VTRANS SGUVEC F! -0.5 3 VTRANS SGUVEC F! 			( shift to the left and down the Z-axis; translate)
   6.0 SPEED F! ;

: INITRCUBE2 ( -- )
   INITUMATS
   1.0 SCALEX F! 1.0 SCALEY F! 1.0 SCALEZ F!										( don't scale)
   0.0 SHEARXYA F! 0.0 SHEARXYB F! 0.0 SHEARXZA F! 0.0 SHEARXZC F! 0.0 SHEARYZB F! 0.0 SHEARYZC F!	( no shear)
   30.0 1 VROTDEGS SGUVEC F! 0.0 2 VROTDEGS SGUVEC F! 15.0 3 VROTDEGS SGUVEC F! 	( rotate around x-axis and z-axis)
   0.3 1 VTRANS SGUVEC F! 0.0 2 VTRANS SGUVEC F! 0.0 3 VTRANS SGUVEC F! 			( shift to the right; translate)
   4.0 SPEED F! ;

: WAITSPACE  BEGIN PAUSE KEY 32 = UNTIL DISCARD ; 

1 1 MMATTMP MATRESADDR !

BKGFGCLR @ 65535 AND BKGCLR !

INIT

TASK TA DROP
TASK TB DROP

: RCUBE1  TA @ ACTIVATE INITRCUBE1 BEGIN UPDMAT TRANSFORM REDCLR CLR ! DRAW INVSCR DELAY BKGCLR @ CLR ! DRAW ROTATEX KEY 97 = UNTIL DISCARD TERMINATE ;

: RCUBE2  TB @ ACTIVATE INITRCUBE2 BEGIN UPDMAT TRANSFORM GREENCLR CLR ! DRAW INVSCR DELAY BKGCLR @ CLR ! DRAW ROTATEY KEY 98 = UNTIL DISCARD TERMINATE ;

RCUBE1 RCUBE2

WAITSPACE

