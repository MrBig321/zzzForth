( 3DVECTOR and 4*4Matrix operations)

DECIMAL

( creates a vector)
 : VEC3 ( -- )   ( RT:) ( idx -- addr ) ( PStack)
   CREATE HERE 3 FLOATS 0 FILL 3 FLOATS ALLOT
   DOES> SWAP 1- FLOATS + ;		( DOES> puts BODY-address on pstack)

( prints a vector)
: VEC3?  ( addr -- ) ( PStack)
   3 0 DO DUP F? FLOAT+ LOOP DROP ;

( clears vector)
: VEC30 ( addr -- ) ( PStack)
   3 0 DO DUP 0.0 F! FLOAT+ LOOP DROP ;

( magnitude of vector)
: VEC3M  ( addr -- ) ( PStack)    ( -- mag) ( FStack)
   3 0 DO DUP F@ FDUP F* FLOAT+ LOOP DROP F+ F+ FSQRT ;

VEC3 VECRES

( adds two vectors)
: VEC3+  ( addr1 addr2 -- ) ( PStack) ( result in VECRES)
   3 0 DO DUP F@ FLOAT+ SWAP DUP F@ FLOAT+ F+ SWAP 1 VECRES I FLOATS + F! LOOP DROP DROP ;

( subtracts vector2 from vector1)
: VEC3-  ( addr1 addr2 -- ) ( PStack) ( result in VECRES)
   SWAP 3 0 DO DUP F@ FLOAT+ SWAP DUP F@ FLOAT+ F- SWAP 1 VECRES I FLOATS + F! LOOP DROP DROP ;

( negates vector)
: -VEC3  ( addr -- ) ( PStack) ( result in VECRES)
   3 0 DO DUP F@ FLOAT+ FNEGATE 1 VECRES I FLOATS + F! LOOP DROP ;

( multiplies a vector by a float value)
: VEC3*  ( addr -- ) ( PStack) ( result in VECRES)    ( val -- ) ( FStack)
   3 0 DO DUP FDUP F@ FSWAP F* 1 VECRES I FLOATS + F! FLOAT+ LOOP DROP FDROP ;

( divides vector by a float-value)
: VEC3/  ( addr -- ) ( PStack) ( result in VECRES)    ( val -- ) ( FStack)
   3 0 DO DUP FDUP F@ FSWAP F/ 1 VECRES I FLOATS + F! FLOAT+ LOOP DROP FDROP ;

( normalizes vector)
: VEC3N  ( addr -- ) ( PStack) ( result in vector at addr)
   DUP VEC3M 
   3 0 DO DUP FDUP F@ FSWAP F/ DUP F! FLOAT+ LOOP DROP FDROP ;

( dot product of two vectors)
: VEC3D  ( addr1 addr2 -- ) ( PStack)     ( -- dotprod) ( FStack)
   3 0 DO DUP F@ FLOAT+ SWAP DUP F@ FLOAT+ SWAP F* LOOP DROP DROP F+ F+ ;

( cross product of two vectors)
: VEC3X  ( addr1 addr2 -- ) ( PStack) ( result in VECRES)
	SWAP DUP FLOAT+ F@ SWAP DUP FLOAT+ FLOAT+ F@ F* 
	SWAP DUP FLOAT+ FLOAT+ F@ SWAP DUP FLOAT+ F@ F* 
    F- 1 VECRES F! 
	SWAP DUP FLOAT+ FLOAT+ F@ SWAP DUP F@ F* 
	SWAP DUP F@ SWAP DUP FLOAT+ FLOAT+ F@ F* 
    F- 2 VECRES F! 
	SWAP DUP F@ SWAP DUP FLOAT+ F@ F* 
	SWAP DUP FLOAT+ F@ SWAP DUP F@ F* 
    F- 3 VECRES F! ;

( copy vector at addr1 to vector at addr2)
: VEC3CP  ( addr1 addr2 -- )
   SWAP 3 0 DO DUP F@ FLOAT+ SWAP DUP F! FLOAT+ SWAP LOOP DROP DROP ;

( **************USAGE************************
	VEC3 VEC1
	VEC3 VEC2
	3.0 1 VEC1 F! 7.0 2 VEC1 F! 11.0 3 VEC1 F! 
	2.0 1 VEC2 F! 8.0 2 VEC2 F! 5.0 3 VEC2 F! 
	1 VEC1 VEC3? CR
	1 VEC2 VEC3? CR
	1 VEC1 VEC3M F. CR
	1 VEC1 1 VEC2 VEC3+ 1 VECRES VEC3? CR
	1 VEC1 1 VEC2 VEC3- 1 VECRES VEC3? CR
	1 VEC1 -VEC3 1 VECRES VEC3? CR 
	1 VEC1 2.0 VEC3* 1 VECRES VEC3? CR
	1 VEC1 2.0 VEC3/ 1 VECRES VEC3? CR
	1 VEC1 VEC3N 1 VEC1 VEC3? CR 
	1 VEC1 1 VEC2 VEC3D F. CR
	1 VEC1 1 VEC2 VEC3X 1 VECRES VEC3? CR
	1 VEC1 VEC3? CR
	1 VEC2 VEC3? CR
	1 VEC1 1 VEC2 VEC3CP 
	1 VEC1 VEC3? CR
	1 VEC2 VEC3? CR
**********************************************)

( creates a 4*4 matrix)
: MAT ( -- )  ( RT:) ( #row #col -- addr ) ( PStack)
	CREATE HERE DUP 16 FLOATS 0 FILL 
	4 0 DO DUP 1.0 F! 5 FLOATS + LOOP DROP 
	16 FLOATS ALLOT
	DOES> ROT 1- 4 * FLOATS + SWAP 1- FLOATS + ; 

( prints a matrix) 
: MAT?  ( addr -- ) ( PStack)
	CR 4 0 DO 4 0 DO DUP F? FLOAT+ LOOP CR LOOP DROP ;

( clears a matrix) 
: MAT0  ( addr -- ) ( PStack)
  4 0 DO 4 0 DO DUP 0.0 F! FLOAT+ LOOP LOOP DROP ;

( inits a matrix to identity matrix) 
: MATI  ( addr -- ) ( PStack)
	DUP 16 FLOATS 0 FILL 
	4 0 DO DUP 1.0 F! 5 FLOATS + LOOP DROP ;

VARIABLE VECRESADDR	( the address of the Vector holding the result)
VARIABLE MATRESADDR	( the address of the Matrix holding the result)
FVARIABLE VW	( the W)

( Matrix*Vector)   ( result in VECRESADDR, it must be cleared!)
: MV* ( addrm addrv -- )  
	0.0 VW F!
	3 0 DO 3 0 DO OVER J 4 * FLOATS + I FLOATS + F@ DUP I FLOATS + F@ F* 
	VECRESADDR @ J FLOATS + F+! LOOP 
	OVER I 4 * FLOATS + 3 FLOATS + F@ VECRESADDR @ I FLOATS + F+! LOOP
	SWAP 3 4 * FLOATS + 3 0 DO I 0 <> IF FLOAT+ THEN DUP F@ SWAP I 0 <> IF FLOAT+ THEN DUP F@ F* VW F+! LOOP DROP FLOAT+ F@ VW F+!
	VW F@ F0= INVERT IF VECRESADDR @ 3 0 DO I 0 <> IF FLOAT+ THEN DUP F@ VW F@ F/ DUP F! LOOP DROP THEN ;

( Matrix*Matrix)   ( result in MATRESADDR, it must be cleared!)
VARIABLE MOLIDX	( the outermost loop-idx value)
: MM* ( addrm1 addrm2 -- )  ( PStack)
	4 0 DO I MOLIDX ! 4 0 DO 4 0 DO OVER MOLIDX @ 4 * FLOATS + I FLOATS + F@ 
	DUP I 4 * FLOATS + J FLOATS + F@ F*
	MATRESADDR @ MOLIDX @ 4 * FLOATS + J FLOATS + F+!
	LOOP LOOP LOOP DROP DROP ;

( copies matrix at addr1 to matrix at addr2)
: MATCP   ( addr1 addr2 -- )
	SWAP 16 0 DO DUP F@ FLOAT+ SWAP DUP F! FLOAT+ SWAP LOOP DROP DROP ;

( **************USAGE************************
	VEC3 VEC
	MAT ROTX
	MAT ROTY
	1 VEC VECRESADDR !

	11.5 2 VEC F!		; store 11.5 in the second idx of VEC
	33.7 2 1 ROTX F!	; to store 33.7 at [2,1] of ROTX
	1 VEC VEC3?
	1 1 ROTX MAT?

	1 1 ROTX 1 VEC MV*
	1 VECRES VEC3?

	MAT MROT
	1 1 MROT MATRESADDR !
	1 1 ROTX 1 1 ROTY MM*
	1 1 ROT MAT?

	1 1 ROTX 1 1 ROTY MATCP 
	1 1 ROTY MAT?

	MAT M1  MAT M2  MAT MRES  VEC3 VRES
	1.0 1 1 M1 F! 6.0 1 2 M1 F! 8.0 1 3 M1 F! 2.0 1 4 M1 F!
	2.0 2 1 M1 F! 5.0 2 2 M1 F! 7.0 2 3 M1 F! 3.0 2 4 M1 F!
	3.0 3 1 M1 F! 4.0 3 2 M1 F! 9.0 3 3 M1 F! 5.0 3 4 M1 F!
	7.0 4 1 M1 F! 1.0 4 2 M1 F! 3.0 4 3 M1 F! 4.0 4 4 M1 F!

	5.0 1 1 M2 F! 8.0 1 2 M2 F! 1.0 1 3 M2 F! 2.0 1 4 M2 F!
	6.0 2 1 M2 F! 1.0 2 2 M2 F! 4.0 2 3 M2 F! 3.0 2 4 M2 F!
	3.0 3 1 M2 F! 2.0 3 2 M2 F! 7.0 3 3 M2 F! 4.0 3 4 M2 F!
	1.0 4 1 M2 F! 2.0 4 2 M2 F! 3.0 4 3 M2 F! 4.0 4 4 M2 F!

	1 1 MRES MAT0  1 1 MRES MATRESADDR !
	1 1 M1 1 1 M2 MM* 
	MATRESADDR @ MAT? 

	VEC3 VEC1
	4.0 1 VEC1 F! 2.0 2 VEC1 F! 7.0 3 VEC1 F! 
	CR 1 VEC1 VEC3? CR
	1 VRES V3CLR 1 VRES VECRES !
	1 1 M1 1 VEC1 MV*
	1 VECRES @ VEC3?

	1 1 M1 MAT?
	1 1 M2 MAT?
	1 1 M1 1 1 M2 MATCP
	1 1 M1 MAT?
	1 1 M2 MAT?

**********************************************)



