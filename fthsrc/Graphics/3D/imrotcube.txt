( Fixed point 3D graphics)
( Two rotating cubes, one per task)
( Uses isin.txt, ivecmat.txt and graphics.txt)

( Since here PAUSE only gets called from DELAY, there would be no need for this many USER variables)
( By the way, MRES, VECRES and PVEC are shared between the two tasks)

( We scale by SCALE defined in ivecmat and in isin)

DECIMAL

: IMROTCUBE ;  ( marker for FORGET)

( inits a USER-vector, i.e. a vector defined per task)
: INITUVEC ( -- )
   INCUSER INCUSER ;

( Set/Get an element of a User-vector)
( NOTE: Instead of "1 USERVEC SGUVEC" we can simply write "USERVEC" !!)
: SGUVEC ( #idx addr -- addr2)
   SWAP 1- CELLS + ;

( inits a USER-matrix, i.e. a matrix defined per task)
: ALLOCUMAT ( -- )
   15 0 DO INCUSER LOOP ;

( Set/Get an element of a User-matrix)
( NOTE: Instead of "1 1 USERMAT SGUMAT" we can simply write "USERMAT" !!)
: SGUMAT ( #row #col addr -- addrElement)
   ROT 1- 4 * CELLS + SWAP 1- CELLS + ; 

SCALE 2/ 2/ CONSTANT QUATER             ( 0.25)
SCALE 2/ 2/ NEGATE CONSTANT NQUATER     ( -0.25)

( 8 vertices of CUBE)
VEC3 V1
NQUATER 1 V1 ! QUATER 2 V1 ! NQUATER 3 V1 ! 
VEC3 V2
QUATER 1 V2 ! QUATER 2 V2 ! NQUATER 3 V2 ! 
VEC3 V3
QUATER 1 V3 ! NQUATER 2 V3 ! NQUATER 3 V3 ! 
VEC3 V4
NQUATER 1 V4 ! NQUATER 2 V4 ! NQUATER 3 V4 ! 
VEC3 V5
NQUATER 1 V5 ! QUATER 2 V5 ! QUATER 3 V5 ! 
VEC3 V6
QUATER 1 V6 ! QUATER 2 V6 ! QUATER 3 V6 ! 
VEC3 V7
QUATER 1 V7 ! NQUATER 2 V7 ! QUATER 3 V7 ! 
VEC3 V8
NQUATER 1 V8 ! NQUATER 2 V8 ! QUATER 3 V8 ! 
CREATE VERTICES 1 V1 , 1 V2 , 1 V3 , 1 V4 , 1 V5 , 1 V6 , 1 V7 , 1 V8 ,
8 CONSTANT VERTEXNUM
4 CONSTANT FACECOORDSCNT
CREATE FACE1 0 , 1 , 2 , 3 ,                ( face1 of the cube consists of vertices 1, 2, 3, 4)
CREATE FACE2 1 , 5 , 6 , 2 , 
CREATE FACE3 5 , 4 , 7 , 6 , 
CREATE FACE4 4 , 0 , 3 , 7 , 
CREATE FACE5 0 , 4 , 5 , 1 , 
CREATE FACE6 3 , 2 , 6 , 7 , 
CREATE FACES FACE1 , FACE2 , FACE3 , FACE4 , FACE5 , FACE6 , 
6 CONSTANT FACENUM

: INITCOORDS ( -- )
   2 VERTEXNUM * 1- 0 DO INCUSER LOOP ;

USER COORDS INITCOORDS                      ( the transformed [x,y] coords, ints)
VARIABLE POLYCOORDS 2 FACECOORDSCNT * 1- CELLS ALLOT

63488 CONSTANT REDCLR
2016 CONSTANT GREENCLR
USER CLR                ( color of CUBE)
USER SPEED              ( speed of rotation)

( Scaling)
USER SCALEX USER SCALEY USER SCALEZ
USER MSCALE ALLOCUMAT 

( Shearing)
USER SHEARXYA USER SHEARXYB USER SHEARXZA USER SHEARXZC USER SHEARYZB USER SHEARYZC
USER MSHEARXY ALLOCUMAT 
USER MSHEARXZ ALLOCUMAT 
USER MSHEARYZ ALLOCUMAT 
USER MSHEAR ALLOCUMAT 

( Rotation)
USER VROTDEGS INITUVEC 
USER MROTX ALLOCUMAT
USER MROTY ALLOCUMAT
USER MROTZ ALLOCUMAT
USER MROT ALLOCUMAT

( Translation)
USER VTRANS INITUVEC
USER MTRANS ALLOCUMAT

: UPDSCALE  ( -- )
   SCALEX @ MSCALE !
   SCALEY @ 2 2 MSCALE SGUMAT !
   SCALEZ @ 3 3 MSCALE SGUMAT ! ;

: UPDSHEARXY  ( -- )
   SHEARXYA @ 1 3 MSHEARXY SGUMAT !
   SHEARXYB @ 2 3 MSHEARXY SGUMAT ! ;

: UPDSHEARXZ  ( -- )
   SHEARXZA @ 1 2 MSHEARXZ SGUMAT !
   SHEARXZC @ 3 2 MSHEARXZ SGUMAT ! ;

: UPDSHEARYZ  ( -- )
   SHEARYZB @ 2 1 MSHEARYZ SGUMAT !
   SHEARYZC @ 3 1 MSHEARYZ SGUMAT ! ;

: UPDSHEAR  ( -- )
  UPDSHEARXY UPDSHEARXZ UPDSHEARYZ
  MSHEARXY MSHEARXZ MM* 
  1 1 MRES SCALE MAT/               ( DOWNSCALE) 
  MSHEAR MRES MATCP                 ( copy result)
  MSHEAR MSHEARYZ  MM* 
  1 1 MRES SCALE MAT/               ( DOWNSCALE)
  MSHEAR 1 1 MRES MATCP ;           ( copy result)

: UPDROTX  ( -- )
   VROTDEGS @ COS 2 2 MROTX SGUMAT !
   VROTDEGS @ SIN NEGATE 2 3 MROTX SGUMAT !
   VROTDEGS @ SIN 3 2 MROTX SGUMAT !
   VROTDEGS @ COS 3 3 MROTX SGUMAT ! ;

: UPDROTY  ( -- )
   2 VROTDEGS SGUVEC @ COS MROTY !
   2 VROTDEGS SGUVEC @ SIN 1 3 MROTY SGUMAT !
   2 VROTDEGS SGUVEC @ SIN NEGATE 3 1 MROTY SGUMAT !
   2 VROTDEGS SGUVEC @ COS 3 3 MROTY SGUMAT ! ;

: UPDROTZ  ( -- )
   3 VROTDEGS SGUVEC @ COS MROTZ !
   3 VROTDEGS SGUVEC @ SIN NEGATE 1 2 MROTZ SGUMAT !
   3 VROTDEGS SGUVEC @ SIN 2 1 MROTZ SGUMAT !
   3 VROTDEGS SGUVEC @ COS 2 2 MROTZ SGUMAT ! ;

: UPDROT  ( -- )
  UPDROTX UPDROTY UPDROTZ
  MROTX MROTY MM* 
  1 1 MRES SCALE MAT/       ( DOWNSCALE)
  MROT 1 1 MRES MATCP       ( copy result)
  MROT MROTZ MM* 
  1 1 MRES SCALE MAT/       ( DOWNSCALE)
  MROT 1 1 MRES MATCP ;     ( copy result)

: UPDTRANS  ( -- )
   VTRANS @ 1 4 MTRANS SGUMAT !
   2 VTRANS SGUVEC @ 2 4 MTRANS SGUMAT !
   3 VTRANS SGUVEC @ 3 4 MTRANS SGUMAT ! ;

( Projection; shared)
VARIABLE S
90 CONSTANT FOV                    ( FOV should be between 30 and 90)
100 CONSTANT ZFAR                  ( f [zFar], far clipping plane can be e.g. 100)
1 CONSTANT ZNEAR                   ( n [zNear], near clipping plane can be e.g. 1)
1 UPSCALE UPSCALE FOV 2/ TAN / S !
MAT MPROJ
S @ 1 1 MPROJ !
S @ 2 2 MPROJ !
ZFAR UPSCALE NEGATE ZFAR ZNEAR - / 3 3 MPROJ !
ZFAR ZNEAR * UPSCALE NEGATE ZFAR ZNEAR - / 3 4 MPROJ !
SCALE NEGATE 4 3 MPROJ ! 

( If we use the values above, then in reality the matrix needs no scaling:)
( MAT MPROJ)
( 1 1 1 MPROJ !)
( 1 2 2  MPROJ !)
( -1 3 3  MPROJ !)
( 1 4 4  MPROJ !)   ( to get rid of scaling done in ivecmat MATI)
( -1 4 3  MPROJ !)
( -1 3 4  MPROJ !)
 ( However in MV* we scale down, because the other matrices are scaled up, so we should scale up MPROJ too!)
( 1 1 MPROJ SCALE MAT* )
 ( MPROJ[3,3] = 1.01 nd MPROJ[3,4]= 1.01, so store SCALE*1.01 [16547.84] in MPROJ:)
( -16547 3 3 MPROJ !)
( -16547 3 4 MPROJ !)

( Screen-matrix, ToScreen)
( shared)
MAT MSCR 
SCRW 2/ 1 1 MSCR ! 
SCRH 2/ NEGATE 2 2 MSCR ! 
SCRW 2/ 1 4 MSCR ! 
SCRH 2/ 2 4 MSCR ! 

( Either the MSCR ToScreen-matrix or TOSCR should be used)
( : TOSCR) ( addrv -- )	( result in VECRES)
(    DUP @ SCALE + SCRW 2/ * SCALE / SCRW 1 - MIN 1 VECRES !  )
(    CELL+ @ SCALE + 2/ NEGATE SCALE + SCRH * SCALE / SCRH 1- MIN 2 VECRES ! )
(    1 3 VECRES ! ;)

: INIT ( -- )
   PAGE 2 29 AT-XY S" Press 'a' to stop RedCube and 'b' to stop GreenCube." TYPE 
   2 30 AT-XY S" Then press Ctrl-c or SPACE to Quit" TYPE ;

VEC3 PVEC                   ( vector for tmp result) 
USER MMAT ALLOCUMAT         ( scaling*shearing*rotation*translation)

: UPDMAT  ( -- )
  UPDSCALE UPDSHEAR UPDROT UPDTRANS
  MSCALE MSHEAR MM*	 
  1 1 MRES SCALE MAT/       ( DOWNSCALE)
  MMAT 1 1 MRES MATCP       ( copy result)
  MROT MMAT MM*    
  1 1 MRES SCALE MAT/       ( DOWNSCALE)
  MMAT 1 1 MRES MATCP       ( copy result)
  MTRANS MMAT MM* 
  1 1 MRES SCALE MAT/       ( DOWNSCALE)
  MMAT 1 1 MRES MATCP ;     ( copy result)

: TRANSFORM  ( -- )
  VERTEXNUM 0 DO 
  1 1 MMAT VERTICES I CELLS + @ MV*  
  1 PVEC 1 VECRES VEC3CP 
  1 1 MPROJ 1 PVEC MV* 
  1 PVEC 1 VECRES VEC3CP 
(  1 PVEC TOSCR )             ( If we use TOSCR and not MSCR-matrix)
  1 1 MSCR 1 PVEC MV*         ( If we use MSCR-matrix and not TOSCR)
  1 VECRES @ COORDS I 2 * CELLS + DUP >R ! 2 VECRES @ R> CELL+ !
  LOOP ;

: DRAW ( -- )
  FACENUM 0 DO FACES I CELLS + @ 
  FACECOORDSCNT 0 DO DUP I CELLS + 
  COORDS SWAP @ 2 * CELLS + DUP @ POLYCOORDS I 2 * CELLS + DUP ROT SWAP ! CELL+ SWAP CELL+ @ SWAP ! LOOP DROP 
  POLYCOORDS FACECOORDSCNT 0 DO DUP @ SWAP CELL+ DUP @ SWAP CELL+ LOOP DROP 
  CLR @ FACECOORDSCNT POLY LOOP ;  

: ROTATEX ( -- )
   VROTDEGS @ SPEED + DUP 360 >= IF 360 - THEN VROTDEGS ! ;

: ROTATEY ( -- )
   2 VROTDEGS SGUVEC @ SPEED + DUP 360 >= IF 360 - THEN 2 VROTDEGS SGUVEC ! ;

: ROTATEY ( -- )
   3 VROTDEGS SGUVEC @ SPEED + DUP 360 >= IF 360 - THEN 3 VROTDEGS SGUVEC ! ;

: DELAY  ( -- )
   20 SLEEP ;       ( calls PAUSE) 

: INITUMATS ( -- )
   MSCALE MATI
   MSHEARXY MATI MSHEARXZ MATI MSHEARYZ MATI MSHEAR MATI
   MROTX MATI MROTY MATI MROTZ MATI MROT MATI 
   MTRANS MATI	;

: INITRCUBE1 ( -- )
   INITUMATS 
   SCALE SCALEX ! SCALE SCALEY ! SCALE SCALEZ !                                  ( don't scale)
   0 SHEARXYA ! 0 SHEARXYB ! 0 SHEARXZA ! 0 SHEARXZC ! 0 SHEARYZB ! 0 SHEARYZC ! ( no shear)
   0 VROTDEGS ! 30 2 VROTDEGS SGUVEC ! 0 3 VROTDEGS SGUVEC !                     ( rotate around y-axis)
   -11468 1 VTRANS SGUVEC ! 0.0 2 VTRANS SGUVEC ! -8192 3 VTRANS SGUVEC !        ( shift to the left and down the Z-axis; -0.7, 0, -0.5)
   1 SPEED ! ;

: INITRCUBE2 ( -- )
   INITUMATS 
   SCALE SCALEX ! SCALE SCALEY ! SCALE SCALEZ !                                  ( don't scale)
   0 SHEARXYA ! 0 SHEARXYB ! 0 SHEARXZA ! 0 SHEARXZC ! 0 SHEARYZB ! 0 SHEARYZC ! ( no shear)
   30 VROTDEGS ! 0 2 VROTDEGS SGUVEC ! 15 3 VROTDEGS SGUVEC !                    ( rotate around x-axis and z-axis)
   4915 VTRANS ! 0 2 VTRANS SGUVEC ! 0 3 VTRANS SGUVEC !                         ( shift to the right; 0.3, 0, 0)
   2 SPEED ! ;

: WAITSPACE  BEGIN PAUSE KEY 32 = UNTIL DISCARD ; 

BKGFGCLR @ 65535 AND CONSTANT BKGCLR 

INIT

TASK TA DROP
TASK TB DROP

: RCUBE1  TA @ ACTIVATE INITRCUBE1 BEGIN UPDMAT TRANSFORM REDCLR CLR ! DRAW INVSCR DELAY BKGCLR CLR ! DRAW ROTATEX KEY 97 = UNTIL DISCARD TERMINATE ;

: RCUBE2  TB @ ACTIVATE INITRCUBE2 BEGIN UPDMAT TRANSFORM GREENCLR CLR ! DRAW INVSCR DELAY BKGCLR CLR ! DRAW ROTATEY KEY 98 = UNTIL DISCARD TERMINATE ;

RCUBE1 RCUBE2

WAITSPACE

