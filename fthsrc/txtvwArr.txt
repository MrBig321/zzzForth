: TXTVIEW ;  ( marker for FORGET)

DECIMAL

: KEY? KEYW DISCARD DROP ; 

28 CONSTANT KEYPGUP
29 CONSTANT KEYPGDN
22 CONSTANT KEYUP
23 CONSTANT KEYDOWN
27 CONSTANT KEYESC
30 CONSTANT KEYHOME
31 CONSTANT KEYEND

31 CONSTANT NROWS 
64 CONSTANT NCOLS 

VARIABLE MCURX 	( Saved cursor-position of the main-screen) ( 2VARIABLE !?)
VARIABLE MCURY

: SAVEMCUR  ( -- )
   GET-XY MCURY ! MCURX ! ;

: RESTOREMCUR  ( -- )
   MCURX @ MCURY @ AT-XY ;

: INITCURSOR  ( -- )
   0 0 AT-XY ;

: DOMSCR>  ( -- )
   0 0 NCOLS NROWS MSCR> ;

: DO>MSCR  ( -- )
   >MSCR OSPARSON SCROLLON RESTOREMCUR ;

: SHOWCTRLTEXT  ( -- )
    3 NROWS AT-XY ." PGUP PGDN HOME END " 
   22 NROWS AT-XY 127 EMIT  
   24 NROWS AT-XY 128 EMIT  
   43 NROWS AT-XY ." Press ESC to quit" ;

: INITSCR  ( -- )
   OSPARSOFF SCROLLOFF 
   32 REMCUR SAVEMCUR PAGE  
   SHOWCTRLTEXT 
   DOMSCR> INITCURSOR ;

: PRINTABLE? ( c -- flag )
    DUP 32 >= SWAP 127 < AND ;

( should we increase the dictionary-size and add e.g. QOI-image to it too !?)
( Maybe we need two images uncompressed at the same time! So adding it to the Dict would add another image with the same name-VARIABLE, but could be FORGETed)
8192 CONSTANT ROWBEGSLOTS
CREATE ROWBEGS ROWBEGSLOTS 2* ALLOT

: ROWBEG  ( idx -- addr )
  2* ROWBEGS + ;  ( e.g. 170 3 ROWBEG W!) ( 3 ROWBEG W@ .)
( HEX 880000 DECIMAL CONSTANT ROWBEGS)  ( word-sized !)

VARIABLE BEGADDR
VARIABLE LENGTH
VARIABLE ROWIDX
VARIABLE #ROWS
( ZZZFOS prints one space in case of a TAB. See _accept and gstdio_draw_char in assembly)
( If we want to print several spaces in case of a TAB, see SHOWSCR2)
1 CONSTANT TABSIZE   ( some text-editors insert spaces when Tab-key is pressed)
VARIABLE STORE?

: CHKOVERFLOW  ( #rows -- )
   ROWBEGSLOTS >= DUP IF DO>MSCR THEN ABORT" ROWBEGS overflow!" ; 

( If we are the middle of a file and we press PGUP,)
( we don't know how many bytes to jump back because in case of a NewLine-byte,)
( we don't know in which byte-position of the given row the ENTER key was pressed.)
( Also, we need to know how many rows the file consists of because of Ctrl+END.)
( This is why we need an array of rowstart-offsets.)
: FILLROWBEGS  ( addr length -- #rows )   
   0 0 ROT  ( addr #rows #chars length ) 
   0 0 ROWBEG W!
   FALSE STORE? !
   0 DO 
     ( addr #rows #chars )
      STORE? @ IF FALSE STORE? ! DROP 1+ DUP CHKOVERFLOW I OVER ROWBEG W! 0 THEN 
      >R OVER C@ 10 = R> SWAP IF TRUE STORE? ! THEN 
      >R OVER C@  9 = R> SWAP IF TABSIZE + DUP NCOLS >= IF TRUE STORE? ! THEN THEN 
      >R OVER C@ PRINTABLE? R> SWAP IF 1+ DUP NCOLS = IF TRUE STORE? ! THEN THEN 
      2>R 1+ 2R>  ( addr+ #rows #chars )
   LOOP ROT 2DROP 1+ ;  

: SHOWSCR  ( rowidx -- ) 
   #ROWS @ 1 = 
   IF DROP BEGADDR @ LENGTH @ TYPE 
   ELSE 
     DUP NROWS + DUP #ROWS @ 1- > IF DROP #ROWS @ 1- THEN DUP ROT   ( #rowend #rowend #rowbeg ) 
     DO 
       BEGADDR @ I ROWBEG W@ + DUP BEGADDR @ I 1+ ROWBEG W@ + SWAP - TYPE 
     LOOP 
     ( Draw last line?)
     #ROWS @ 1- = IF #ROWS @ 1- ROWBEG W@ DUP LENGTH @ SWAP - SWAP BEGADDR @ + SWAP TYPE THEN 
   THEN ; 

: SHOWSCR2  ( rowidx -- #bytesprocessed ) 
   ROWBEG W@ DUP BEGADDR @ + SWAP LENGTH @ SWAP - ( addr #bytesleft ) ( #bytesleft is the count of chars left to be displayed from addr)
   OVER SWAP 0 0 ROT    ( addr addr #rows[0] #charsperrow[0] #bytesleft )
   0 DO 
     ( addr addr #rows #chars )  
      >R OVER C@ 10 = R> SWAP IF DROP 10 EMIT 1+ 0 THEN  
      >R OVER C@  9 = R> SWAP IF DUP TABSIZE + NCOLS 1- >= IF NCOLS SWAP - SPACES 1+ 0 ELSE TABSIZE + TABSIZE SPACES THEN THEN 
      >R OVER C@ PRINTABLE? R> SWAP IF DUP NCOLS 1- = IF DROP 1+ 0 ELSE 1+ THEN 2>R DUP C@ EMIT 2R> THEN 
      2>R 1+ 2R> ( addr addr+ #rows #chars )  
      OVER NROWS = IF LEAVE THEN  ( if we used GET-XY then if we went till NROWS, then infinite loop [gstdio_cursor_y], so PAUSE won't be called)
   LOOP 2DROP SWAP - ;  

: KPGUP  ( -- )
   ROWIDX @ 0= IF EXIT THEN 
   ROWIDX @ NROWS > 
   IF NROWS NEGATE ROWIDX +! ELSE 0 ROWIDX ! 
   THEN PAGEN ROWIDX @ SHOWSCR INVSCR ;

: KPGDN  ( -- )
   #ROWS @ ROWIDX @ - NROWS > IF NROWS ROWIDX +! PAGEN ROWIDX @ SHOWSCR INVSCR THEN ;

: KUP  ( -- )
   ROWIDX @ 0> IF -1 ROWIDX +! PAGEN ROWIDX @ SHOWSCR INVSCR THEN ;

: KDOWN  ( -- )
   #ROWS @ ROWIDX @ - NROWS > IF 1 ROWIDX +! PAGEN ROWIDX @ SHOWSCR INVSCR THEN ;

: KHOME  ( -- )
   ROWIDX @ 0 <> IF 0 ROWIDX ! PAGEN 0 ROWBEG W@ SHOWSCR INVSCR THEN ;

: KEND  ( -- )
   #ROWS @ NROWS > IF #ROWS @ NROWS - ROWIDX ! PAGEN ROWIDX @ SHOWSCR INVSCR THEN ;

: CTRLKEYS  ( key -- )
    CASE 
      KEYPGUP OF KPGUP ENDOF 
      KEYPGDN OF KPGDN ENDOF 
      KEYUP   OF KUP   ENDOF 
      KEYDOWN OF KDOWN ENDOF 
      KEYHOME OF KHOME ENDOF 
      KEYEND  OF KEND  ENDOF 
    ENDCASE ;

: KEYS  ( -- )
   BEGIN 
     KEYW DISCARD 
     DUP CTRLKEYS
     KEYESC = 
   UNTIL ;

: TXTVW  ( addr len -- )
   2DUP LENGTH ! BEGADDR ! 0 ROWIDX ! 
   INITSCR DUP 0> IF FILLROWBEGS #ROWS ! ROWIDX @ SHOWSCR KEYS DO>MSCR ELSE 2DROP KEY? DO>MSCR THEN ; 

